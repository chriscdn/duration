{"version":3,"file":"duration.umd.js","sources":["../src/index.ts"],"sourcesContent":["type TDurationConstructor = {\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  milliseconds?: number;\n  microseconds?: number;\n};\n\nconst MicrosecondsPerMillisecond = 1e3;\nconst MicrosecondsPerSecond = 1e6;\nconst MicrosecondsPerMinute = 6e7;\nconst MicrosecondsPerHour = 3.6e9;\nconst MicrosecondsPerDay = 8.64e10;\n\nexport class Duration {\n  private _microseconds = 0;\n\n  constructor(options: TDurationConstructor) {\n    this._microseconds =\n      (options.days ?? 0) * MicrosecondsPerDay +\n      (options.hours ?? 0) * MicrosecondsPerHour +\n      (options.minutes ?? 0) * MicrosecondsPerMinute +\n      (options.seconds ?? 0) * MicrosecondsPerSecond +\n      (options.milliseconds ?? 0) * MicrosecondsPerMillisecond +\n      (options.microseconds ?? 0);\n  }\n\n  static with(options: TDurationConstructor) {\n    return new Duration(options);\n  }\n\n  static toDays(options: TDurationConstructor) {\n    return Duration.with(options).days;\n  }\n\n  static toHours(options: TDurationConstructor) {\n    return Duration.with(options).hours;\n  }\n\n  static toMinuates(options: TDurationConstructor) {\n    return Duration.with(options).minutes;\n  }\n\n  static toSeconds(options: TDurationConstructor) {\n    return Duration.with(options).seconds;\n  }\n\n  static toMilliseconds(options: TDurationConstructor) {\n    return Duration.with(options).milliseconds;\n  }\n\n  static toMicroseconds(options: TDurationConstructor) {\n    return Duration.with(options).microseconds;\n  }\n\n  get days() {\n    return this._microseconds / MicrosecondsPerDay;\n  }\n\n  get hours() {\n    return this._microseconds / MicrosecondsPerHour;\n  }\n\n  get minutes() {\n    return this._microseconds / MicrosecondsPerMinute;\n  }\n\n  get seconds() {\n    return this._microseconds / MicrosecondsPerSecond;\n  }\n\n  get milliseconds() {\n    return this._microseconds / MicrosecondsPerMillisecond;\n  }\n\n  get microseconds() {\n    return this._microseconds;\n  }\n\n  abs() {\n    return new Duration({ microseconds: Math.abs(this.microseconds) });\n  }\n}\n"],"names":["MicrosecondsPerSecond","MicrosecondsPerMinute","MicrosecondsPerHour","MicrosecondsPerDay","Duration","options","_options$days","_options$hours","_options$minutes","_options$seconds","_options$milliseconds","_options$microseconds","_microseconds","this","days","hours","minutes","seconds","milliseconds","microseconds","_proto","toDays","toHours","toMinuates","toSeconds","toMilliseconds","toMicroseconds","prototype","abs","Math","key","get"],"mappings":"mgBASA,IACMA,EAAwB,IACxBC,EAAwB,IACxBC,EAAsB,KACtBC,EAAqB,yCAKzB,SAAAC,EAAYC,GAA6B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAFjCC,KAAAA,cAAgB,EAGtBC,KAAKD,eACUN,OAAbA,EAACD,EAAQS,MAAIR,EAAI,GAAKH,GACRI,OAAdA,EAACF,EAAQU,OAAKR,EAAI,GAAKL,GACPM,OAAhBA,EAACH,EAAQW,SAAOR,EAAI,GAAKP,GACTQ,OAAhBA,EAACJ,EAAQY,SAAOR,EAAI,GAAKT,EAdI,KAeR,OAArBU,EAACL,EAAQa,cAAYR,EAAI,IACJC,OADmCA,EACvDN,EAAQc,cAAYR,EAAI,EAC7B,CA4BCS,QA4BA,OAxDAhB,EAAA,KAED,SAAYC,GACV,WAAWD,EAASC,EACtB,EAACD,EAEMiB,OAAP,SAAchB,GACZ,OAAOD,EAAa,KAACC,GAASS,IAChC,EAACV,EAEMkB,QAAP,SAAejB,GACb,OAAOD,EAAQ,KAAMC,GAASU,KAChC,EAACX,EAEMmB,WAAP,SAAkBlB,GAChB,OAAOD,EAAQ,KAAMC,GAASW,OAChC,EAACZ,EAEMoB,UAAP,SAAiBnB,GACf,OAAOD,EAAQ,KAAMC,GAASY,OAChC,EAACb,EAEMqB,eAAP,SAAsBpB,GACpB,OAAOD,EAAQ,KAAMC,GAASa,YAChC,EAACd,EAEMsB,eAAP,SAAsBrB,GACpB,OAAOD,OAAcC,GAASc,YAChC,EAACf,EAAAuB,UA0BDC,IAAA,WACE,OAAO,IAAIxB,EAAS,CAAEe,aAAcU,KAAKD,IAAIf,KAAKM,eACpD,IAACf,OAAA0B,IAAA,OAAAC,IA1BD,WACE,OAAWlB,KAACD,cAAgBT,CAC9B,GAAC,CAAA2B,IAAA,QAAAC,IAED,WACE,OAAWlB,KAACD,cAAgBV,CAC9B,GAAC4B,CAAAA,cAAAC,IAED,WACE,OAAWlB,KAACD,cAAgBX,CAC9B,GAAC6B,CAAAA,cAAAC,IAED,WACE,OAAOlB,KAAKD,cAAgBZ,CAC9B,GAAC,CAAA8B,IAAA,eAAAC,IAED,WACE,OAAOlB,KAAKD,cAhEmB,GAiEjC,GAACkB,CAAAA,mBAAAC,IAED,WACE,OAAOlB,KAAKD,aACd,iPAAC"}