{"version":3,"file":"duration.modern.js","sources":["../src/index.ts"],"sourcesContent":["type TDurationConstructor = {\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  milliseconds?: number;\n  microseconds?: number;\n};\n\nconst MicrosecondsPerMillisecond = 1e3;\nconst MicrosecondsPerSecond = 1e6;\nconst MicrosecondsPerMinute = 6e7;\nconst MicrosecondsPerHour = 3.6e9;\nconst MicrosecondsPerDay = 8.64e10;\n\nexport class Duration {\n  private _microseconds = 0;\n\n  constructor(options: TDurationConstructor) {\n    this._microseconds =\n      (options.days ?? 0) * MicrosecondsPerDay +\n      (options.hours ?? 0) * MicrosecondsPerHour +\n      (options.minutes ?? 0) * MicrosecondsPerMinute +\n      (options.seconds ?? 0) * MicrosecondsPerSecond +\n      (options.milliseconds ?? 0) * MicrosecondsPerMillisecond +\n      (options.microseconds ?? 0);\n  }\n\n  static with(options: TDurationConstructor) {\n    return new Duration(options);\n  }\n\n  static toDays(options: TDurationConstructor) {\n    return Duration.with(options).days;\n  }\n\n  static toHours(options: TDurationConstructor) {\n    return Duration.with(options).hours;\n  }\n\n  static toMinuates(options: TDurationConstructor) {\n    return Duration.with(options).minutes;\n  }\n\n  static toSeconds(options: TDurationConstructor) {\n    return Duration.with(options).seconds;\n  }\n\n  static toMilliseconds(options: TDurationConstructor) {\n    return Duration.with(options).milliseconds;\n  }\n\n  static toMicroseconds(options: TDurationConstructor) {\n    return Duration.with(options).microseconds;\n  }\n\n  get days() {\n    return this._microseconds / MicrosecondsPerDay;\n  }\n\n  get hours() {\n    return this._microseconds / MicrosecondsPerHour;\n  }\n\n  get minutes() {\n    return this._microseconds / MicrosecondsPerMinute;\n  }\n\n  get seconds() {\n    return this._microseconds / MicrosecondsPerSecond;\n  }\n\n  get milliseconds() {\n    return this._microseconds / MicrosecondsPerMillisecond;\n  }\n\n  get microseconds() {\n    return this._microseconds;\n  }\n\n  abs() {\n    return new Duration({ microseconds: Math.abs(this.microseconds) });\n  }\n}\n"],"names":["MicrosecondsPerSecond","MicrosecondsPerMinute","MicrosecondsPerHour","MicrosecondsPerDay","Duration","constructor","options","_options$days","_options$hours","_options$minutes","_options$seconds","_options$milliseconds","_options$microseconds","this","_microseconds","days","hours","minutes","seconds","milliseconds","microseconds","with","toDays","toHours","toMinuates","toSeconds","toMilliseconds","toMicroseconds","abs","Math"],"mappings":"AASA,MACMA,EAAwB,IACxBC,EAAwB,IACxBC,EAAsB,KACtBC,EAAqB,YAEdC,EAGXC,WAAAA,CAAYC,GAA6BC,IAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,KAFjCC,cAAgB,EAGtBD,KAAKC,eACUP,OAAbA,EAACD,EAAQS,MAAIR,EAAI,GAAKJ,GACR,OAAdK,EAACF,EAAQU,OAAKR,EAAI,GAAKN,GACPO,OAAhBA,EAACH,EAAQW,SAAOR,EAAI,GAAKR,UACzBS,EAACJ,EAAQY,SAAOR,EAAI,GAAKV,EAdI,KAeR,OAArBW,EAACL,EAAQa,cAAYR,EAAI,IACJ,OADmCC,EACvDN,EAAQc,cAAYR,EAAI,EAC7B,CAEA,WAAOS,CAAKf,GACV,OAAO,IAAIF,EAASE,EACtB,CAEA,aAAOgB,CAAOhB,GACZ,OAAOF,EAASiB,KAAKf,GAASS,IAChC,CAEA,cAAOQ,CAAQjB,GACb,OAAOF,EAASiB,KAAKf,GAASU,KAChC,CAEA,iBAAOQ,CAAWlB,GAChB,OAAOF,EAASiB,KAAKf,GAASW,OAChC,CAEA,gBAAOQ,CAAUnB,GACf,OAAOF,EAASiB,KAAKf,GAASY,OAChC,CAEA,qBAAOQ,CAAepB,GACpB,OAAOF,EAASiB,KAAKf,GAASa,YAChC,CAEA,qBAAOQ,CAAerB,GACpB,OAAOF,EAASiB,KAAKf,GAASc,YAChC,CAEA,QAAIL,GACF,YAAYD,cAAgBX,CAC9B,CAEA,SAAIa,GACF,OAAOH,KAAKC,cAAgBZ,CAC9B,CAEA,WAAIe,GACF,OAAOJ,KAAKC,cAAgBb,CAC9B,CAEA,WAAIiB,GACF,YAAYJ,cAAgBd,CAC9B,CAEA,gBAAImB,GACF,OAAON,KAAKC,cAhEmB,GAiEjC,CAEA,gBAAIM,GACF,OAAWP,KAACC,aACd,CAEAc,GAAAA,GACE,OAAO,IAAIxB,EAAS,CAAEgB,aAAcS,KAAKD,IAAIf,KAAKO,eACpD"}