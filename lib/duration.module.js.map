{"version":3,"file":"duration.module.js","sources":["../src/index.ts"],"sourcesContent":["type TDurationInput = {\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  milliseconds?: number;\n  microseconds?: number;\n};\n\nconst MicrosecondsPerMillisecond = 1e3;\nconst MicrosecondsPerSecond = 1e6;\nconst MicrosecondsPerMinute = 6e7;\nconst MicrosecondsPerHour = 3.6e9;\nconst MicrosecondsPerDay = 8.64e10;\n\nexport class Duration {\n  private _microseconds = 0;\n\n  constructor(input: TDurationInput) {\n    this._microseconds =\n      (input.days ?? 0) * MicrosecondsPerDay +\n      (input.hours ?? 0) * MicrosecondsPerHour +\n      (input.minutes ?? 0) * MicrosecondsPerMinute +\n      (input.seconds ?? 0) * MicrosecondsPerSecond +\n      (input.milliseconds ?? 0) * MicrosecondsPerMillisecond +\n      (input.microseconds ?? 0);\n  }\n\n  static with(input: TDurationInput) {\n    return new Duration(input);\n  }\n\n  static toDays(input: TDurationInput) {\n    return Duration.with(input).days;\n  }\n\n  static toHours(input: TDurationInput) {\n    return Duration.with(input).hours;\n  }\n\n  static toMinuates(input: TDurationInput) {\n    return Duration.with(input).minutes;\n  }\n\n  static toSeconds(input: TDurationInput) {\n    return Duration.with(input).seconds;\n  }\n\n  static toMilliseconds(input: TDurationInput) {\n    return Duration.with(input).milliseconds;\n  }\n\n  static toMicroseconds(input: TDurationInput) {\n    return Duration.with(input).microseconds;\n  }\n\n  get days() {\n    return this._microseconds / MicrosecondsPerDay;\n  }\n\n  get hours() {\n    return this._microseconds / MicrosecondsPerHour;\n  }\n\n  get minutes() {\n    return this._microseconds / MicrosecondsPerMinute;\n  }\n\n  get seconds() {\n    return this._microseconds / MicrosecondsPerSecond;\n  }\n\n  get milliseconds() {\n    return this._microseconds / MicrosecondsPerMillisecond;\n  }\n\n  get microseconds() {\n    return this._microseconds;\n  }\n\n  abs() {\n    return new Duration({ microseconds: Math.abs(this.microseconds) });\n  }\n}\n"],"names":["MicrosecondsPerSecond","MicrosecondsPerMinute","MicrosecondsPerHour","MicrosecondsPerDay","Duration","input","_input$days","_input$hours","_input$minutes","_input$seconds","_input$milliseconds","_input$microseconds","_microseconds","this","days","hours","minutes","seconds","milliseconds","microseconds","_proto","toDays","toHours","toMinuates","toSeconds","toMilliseconds","toMicroseconds","prototype","abs","Math","key","get"],"mappings":"iSASA,IACMA,EAAwB,IACxBC,EAAwB,IACxBC,EAAsB,KACtBC,EAAqB,MAEdC,0BAGX,SAAAA,EAAYC,GAAqB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAFzBC,KAAAA,cAAgB,EAGtBC,KAAKD,eACQN,OAAXA,EAACD,EAAMS,MAAIR,EAAI,GAAKH,GACRI,OAAZA,EAACF,EAAMU,OAAKR,EAAI,GAAKL,GACPM,OAAdA,EAACH,EAAMW,SAAOR,EAAI,GAAKP,GACTQ,OAAdA,EAACJ,EAAMY,SAAOR,EAAI,GAAKT,EAdM,KAeV,OAAnBU,EAACL,EAAMa,cAAYR,EAAI,IACJC,OADmCA,EACrDN,EAAMc,cAAYR,EAAI,EAC3B,CA4BCS,QA4BA,OAxDAhB,EAAA,KAED,SAAYC,GACV,WAAWD,EAASC,EACtB,EAACD,EAEMiB,OAAP,SAAchB,GACZ,OAAOD,EAAa,KAACC,GAAOS,IAC9B,EAACV,EAEMkB,QAAP,SAAejB,GACb,OAAOD,EAAQ,KAAMC,GAAOU,KAC9B,EAACX,EAEMmB,WAAP,SAAkBlB,GAChB,OAAOD,EAAQ,KAAMC,GAAOW,OAC9B,EAACZ,EAEMoB,UAAP,SAAiBnB,GACf,OAAOD,EAAQ,KAAMC,GAAOY,OAC9B,EAACb,EAEMqB,eAAP,SAAsBpB,GACpB,OAAOD,EAAQ,KAAMC,GAAOa,YAC9B,EAACd,EAEMsB,eAAP,SAAsBrB,GACpB,OAAOD,OAAcC,GAAOc,YAC9B,EAACf,EAAAuB,UA0BDC,IAAA,WACE,OAAO,IAAIxB,EAAS,CAAEe,aAAcU,KAAKD,IAAIf,KAAKM,eACpD,IAACf,OAAA0B,IAAA,OAAAC,IA1BD,WACE,OAAWlB,KAACD,cAAgBT,CAC9B,GAAC,CAAA2B,IAAA,QAAAC,IAED,WACE,OAAWlB,KAACD,cAAgBV,CAC9B,GAAC4B,CAAAA,cAAAC,IAED,WACE,OAAWlB,KAACD,cAAgBX,CAC9B,GAAC6B,CAAAA,cAAAC,IAED,WACE,OAAOlB,KAAKD,cAAgBZ,CAC9B,GAAC,CAAA8B,IAAA,eAAAC,IAED,WACE,OAAOlB,KAAKD,cAhEmB,GAiEjC,GAACkB,CAAAA,mBAAAC,IAED,WACE,OAAOlB,KAAKD,aACd,iPAAC"}